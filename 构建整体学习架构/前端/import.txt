	
	
	import defaultExport from "module-name";
			module-name
				要导入的模块。通常是包含目标模块的.js文件的相对或绝对路径名，可以不包括.js扩展名。
				某些特定的打包工具可能允许或需要使用扩展或依赖文件，它会检查比对你的运行环境。
				只允许单引号和双引号的字符串。
				export defailt (只可以导出一个(常量 | 函数 | 文件 | 模块))
			defaultExport 
				是默认接口的导出名
				
	导入整个模块的内容			
	import * as name from "module-name";
			name
				导入模块对象整体的别名，在引用导入模块时，它将作为一个命名空间来使用。
			import * as myModule from '/modules/my-module.js';
			其中的一个例子	：
			import {doAllTheAmazingThings as myModule} from '/modules/my-module.js';
			其实和单个导出的意思也比较相近就是在引用的时候将他们 放在一个对象上进行使用
				在这里，访问导出接口意味着使用模块名称（在本例为“myModule”）作为命名空间。
				例如，如果上面导入的模块包含一个接口doAllTheAmazingThings()，你可以这样调用：
			myModule.doAllTheAmazingThings();
			
（个人理解就是相当于导入一个对象将里边方法和变量否放在这个对象上面了，直接对象点的方式就可以直接是用）		

	
	导入单个接口			
	import { export } from "module-name";
	
	import { export as alias } from "module-name";
	
	导入多个接口
	import { export1 , export2 } from "module-name";
			这将foo和bar插入当前作用域。
	import { foo , bar } from "module-name/path/to/specific/un-exported/file";
	import { export1 , export2 as alias2 , [...] } from "module-name";
	import defaultExport, { export [ , [...] ] } from "module-name";
	导入默认值
	引入模块可能有一个defaultexport（无论它是对象，函数，类等）可用。然后可以使用import语句来导入这样的默认接口。

	最简单的用法是直接导入默认值：

	import myDefault from '/modules/my-module.js';
	也可以同时将default语法与上述用法（命名空间导入或命名导入）一起使用。在这种情况下，default导入必须首先声明。
	 例如：

	import myDefault, * as myModule from '/modules/my-module.js';
	// myModule used as a namespace
	或者

	import myDefault, {foo, bar} from '/modules/my-module.js';
	// specific, named imports
	When importing a default export with dynamic imports, it works a bit differently. 
	You need to destructure and rename the "default" key from the returned object.

	(async () => {
	  if (somethingIsTrue) {
		const { default: myDefault, foo, bar } = await import('/modules/my-module.js');
	  }
	})();
		import defaultExport, * as name from "module-name";
	
	仅为副作用而导入一个模块
	import "module-name";
			整个模块仅为副作用（中性词，无贬义含义）而导入，而不导入模块中的任何内容（接口）。 
			这将运行模块中的全局代码, 但实际上不导入任何值。
	var promise = import("module-name");//这是一个处于第三阶段的提案。
	
	
	动态import
		标准用法的import导入的模块是静态的，会使所有被导入的模块，在加载时就被编译（无法做到按需编译，降低首页加载速度）。有些场景中，你可能希望根据条件导入模块或者按需导入模块，这时你可以使用动态导入代替静态导入。下面的是你可能会需要动态导入的场景：

		当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它。
		当静态导入的模块很明显的占用了大量系统内存且被使用的可能性很低。
		当被导入的模块，在加载时并不存在，需要异步获取
		当导入模块的说明符，需要动态构建。（静态导入只能使用静态说明符）
		当被导入的模块有副作用（这里说的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。（原则上来说，模块不能有副作用，但是很多时候，你无法控制你所依赖的模块的内容）
		请不要滥用动态导入（只有在必要情况下采用）。静态框架能更好的初始化依赖，而且更有利于静态分析工具和tree shaking发挥作用

		关键字import可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise。

		import('/modules/my-module.js')
		  .then((module) => {
			// Do something with the module.
		  });
		这种使用方式也支持 await 关键字。

		let module = await import('/modules/my-module.js');
		示例
		标准导入
		下面的代码将会演示如何从辅助模块导入以协助处理AJAX JSON请求。

		模块：file.js
		function getJSON(url, callback) {
		  let xhr = new XMLHttpRequest();
		  xhr.onload = function () {
			callback(this.responseText)
		  };
		  xhr.open('GET', url, true);
		  xhr.send();
		}

		export function getUsefulContents(url, callback) {
		  getJSON(url, data => callback(JSON.parse(data)));
		}
		主程序：main.js
		import { getUsefulContents } from '/modules/file.js';

		getUsefulContents('http://www.example.com',
			data => { doSomethingUseful(data); });
		动态导入
		此示例展示了如何基于用户操作去加载功能模块到页面上，在例子中通过点击按钮，然后会调用模块内的函数。当然这不是能实现这个功能的唯一方式，import()函数也可以支持await。

		const main = document.querySelector("main");
		for (const link of document.querySelectorAll("nav > a")) {
		  link.addEventListener("click", e => {
			e.preventDefault();

			import('/modules/my-module.js')
			  .then(module => {
				module.loadPageInto(main);
			  })
			  .catch(err => {
				main.textContent = err.message;
			  });
		  });
		}